# MediaGo core - Taskfile
# 安装 Task: https://taskfile.dev/installation/
version: "3"

vars:
  APP_NAME: mediago-core
  CMD_PATH: ./cmd/server
  BIN_DIR: ./bin
  RELEASE_DIR: ./release
  TOOLS_BIN_DIR: .bin
  VERSION:
    sh: git describe --tags --always --dirty 2>/dev/null || echo "dev"
  GO_LDFLAGS: -s -w
  # 自动检测平台和架构
  PLATFORM:
    sh: |
      case "{{OS}}" in
        windows) echo "win32" ;;
        darwin) echo "darwin" ;;
        linux) echo "linux" ;;
        *) echo "{{OS}}" ;;
      esac
  ARCH:
    sh: |
      case "{{ARCH}}" in
        amd64) echo "x64" ;;
        arm64) echo "arm64" ;;
        *) echo "{{ARCH}}" ;;
      esac
  # 下载器二进制文件路径（根据平台自动设置）
  M3U8_BIN_PATH: '{{.TOOLS_BIN_DIR}}/{{.PLATFORM}}/{{.ARCH}}/N_m3u8DL-RE{{if eq OS "windows"}}.exe{{end}}'
  BILIBILI_BIN_PATH: '{{.TOOLS_BIN_DIR}}/{{.PLATFORM}}/{{.ARCH}}/BBDown{{if eq OS "windows"}}.exe{{end}}'
  DIRECT_BIN_PATH: '{{.TOOLS_BIN_DIR}}/{{.PLATFORM}}/{{.ARCH}}/gopeed{{if eq OS "windows"}}.exe{{end}}'

env:
  CGO_ENABLED: 0
  MEDIAGO_SERVER_ADDR: ":8080"
  MEDIAGO_SCHEMA_PATH: "./configs/download_schemas.json"
  # 自动设置下载器二进制文件路径
  MEDIAGO_M3U8_BIN: '{{.M3U8_BIN_PATH}}'
  MEDIAGO_BILIBILI_BIN: '{{.BILIBILI_BIN_PATH}}'
  MEDIAGO_DIRECT_BIN: '{{.DIRECT_BIN_PATH}}'
  # 日志配置
  MEDIAGO_LOG_LEVEL: '{{.MEDIAGO_LOG_LEVEL | default "info"}}'
  MEDIAGO_LOG_DIR: '{{.MEDIAGO_LOG_DIR | default "./logs"}}'

tasks:
  default:
    desc: 显示所有可用任务
    cmds:
      - task --list
    silent: true

  # ============================================================
  # 开发环境任务 (Development Tasks)
  # ============================================================

  dev:
    desc: 【开发】启动开发服务器
    cmds:
      - go run {{.CMD_PATH}}

  dev:env:
    desc: 【开发】显示当前环境变量配置
    cmds:
      - echo "========================================="
      - echo "  MediaGo 环境配置"
      - echo "========================================="
      - echo "平台 {{OS}}/{{ARCH}} (映射为 {{.PLATFORM}}/{{.ARCH}})"
      - echo ""
      - echo "二进制文件路径"
      - echo "  M3U8 下载器    {{.M3U8_BIN_PATH}}"
      - echo "  Bilibili 下载器 {{.BILIBILI_BIN_PATH}}"
      - echo "  直接下载器     {{.DIRECT_BIN_PATH}}"
      - echo ""
      - echo "文件存在检查"
      - task: _check_file
        vars: { FILE: "{{.M3U8_BIN_PATH}}", NAME: "M3U8 下载器" }
      - task: _check_file
        vars: { FILE: "{{.BILIBILI_BIN_PATH}}", NAME: "Bilibili 下载器" }
      - task: _check_file
        vars: { FILE: "{{.DIRECT_BIN_PATH}}", NAME: "直接下载器" }
      - echo ""
      - echo "其他配置"
      - echo "  服务器地址 {{.MEDIAGO_SERVER_ADDR}}"
      - echo "  日志级别   {{.MEDIAGO_LOG_LEVEL | default "info"}}"
      - echo "  日志目录   {{.MEDIAGO_LOG_DIR | default "./logs"}}"
      - echo "========================================="

  dev:watch:
    desc: 【开发】启动开发服务器（带热重载）
    cmds:
      - |
        {{if eq OS "windows"}}
          echo "Windows下请手动重启服务"
          go run {{.CMD_PATH}}
        {{else}}
          command -v air >/dev/null 2>&1 || go install github.com/cosmtrek/air@latest
          air
        {{end}}

  dev:build:
    desc: 【开发】快速编译当前平台（用于本地测试）
    sources:
      - "**/*.go"
      - go.mod
    generates:
      - "{{.BIN_DIR}}/{{.APP_NAME}}*"
    cmds:
      - task: _mkdir
        vars: { DIR: "{{.BIN_DIR}}" }
      - go build -ldflags "{{.GO_LDFLAGS}}" -o {{.BIN_DIR}}/{{.APP_NAME}}{{exeExt}} {{.CMD_PATH}}
      - echo "✅ 开发版本编译成功 -> {{.BIN_DIR}}/{{.APP_NAME}}{{exeExt}}"

  dev:test:
    desc: 【开发】运行所有测试
    cmds:
      - go test -v ./...

  dev:test:unit:
    desc: 【开发】运行单元测试（快速）
    cmds:
      - go test -short -v ./...

  dev:test:coverage:
    desc: 【开发】生成测试覆盖率报告
    cmds:
      - go test -coverprofile=coverage.out ./...
      - go tool cover -html=coverage.out -o coverage.html
      - echo "✅ 覆盖率报告 coverage.html"

  dev:fmt:
    desc: 【开发】格式化代码
    cmds:
      - go fmt ./...
      - echo "✅ 代码格式化完成"

  dev:lint:
    desc: 【开发】代码静态检查
    cmds:
      - |
        {{if eq OS "windows"}}
          where golangci-lint >nul 2>&1 || go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        {{else}}
          command -v golangci-lint >/dev/null 2>&1 || go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        {{end}}
        golangci-lint run ./...

  dev:tidy:
    desc: 【开发】整理并清理 Go 模块依赖
    cmds:
      - go mod tidy
      - echo "✅ 依赖整理完成"

  dev:swagger:
    desc: 【开发】生成 Swagger API 文档
    sources:
      - "cmd/**/*.go"
      - "internal/**/*.go"
    generates:
      - "docs/swagger.json"
    cmds:
      - |
        {{if eq OS "windows"}}
          where swag >nul 2>&1 || go install github.com/swaggo/swag/cmd/swag@latest
        {{else}}
          command -v swag >/dev/null 2>&1 || go install github.com/swaggo/swag/cmd/swag@latest
        {{end}}
        swag init -g cmd/server/main.go -o docs --parseDependency --parseInternal
        echo "✅ Swagger 文档生成完成"

  dev:swagger:open:
    desc: 【开发】打开 Swagger UI
    cmds:
      - echo "📖 Swagger UI http://localhost:8080/swagger/index.html"
      - |
        {{if eq OS "windows"}}start http://localhost:8080/swagger/index.html
        {{else if eq OS "darwin"}}open http://localhost:8080/swagger/index.html
        {{else}}xdg-open http://localhost:8080/swagger/index.html{{end}}

  dev:docker:
    desc: 【开发】构建并运行 Docker 容器
    cmds:
      - docker build -t {{.APP_NAME}}:{{.VERSION}} .
      - docker run -it --rm -p 8080:8080 {{.APP_NAME}}:{{.VERSION}}

  dev:tools:
    desc: 【开发】安装所有开发工具
    cmds:
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - go install github.com/swaggo/swag/cmd/swag@latest
      - go install github.com/cosmtrek/air@latest
      - echo "✅ 开发工具安装完成"

  dev:clean:
    desc: 【开发】清理开发环境产物
    cmds:
      - task: _rmrf
        vars: { PATH: "{{.BIN_DIR}}" }
      - task: _rmrf
        vars: { PATH: "coverage.out" }
      - task: _rmrf
        vars: { PATH: "coverage.html" }
      - task: _rmrf
        vars: { PATH: "docs/swagger.json" }
      - task: _rmrf
        vars: { PATH: "docs/swagger.yaml" }
      - echo "✅ 开发环境清理完成"

  dev:check:
    desc: 【开发】代码质量全面检查（格式化 + 测试 + 静态检查）
    cmds:
      - task: dev:fmt
      - task: dev:lint
      - task: dev:test:unit
      - echo "✅ 代码质量检查全部通过"

  # ============================================================
  # 发布环境任务 (Release/Production Tasks)
  # ============================================================

  release:build:
    desc: 【发布】构建所有平台的二进制文件（仅编译，不打包工具）
    cmds:
      - task: _mkdir
        vars: { DIR: "{{.BIN_DIR}}" }
      - task: release:build:binary
        vars: { GOOS: linux, GOARCH: amd64 }
      - task: release:build:binary
        vars: { GOOS: linux, GOARCH: arm64 }
      - task: release:build:binary
        vars: { GOOS: darwin, GOARCH: amd64 }
      - task: release:build:binary
        vars: { GOOS: darwin, GOARCH: arm64 }
      - task: release:build:binary
        vars: { GOOS: windows, GOARCH: amd64 }
      - task: release:build:binary
        vars: { GOOS: windows, GOARCH: arm64 }
      - echo "✅ 全平台二进制文件编译完成"

  release:build:binary:
    internal: true
    vars:
      EXT: '{{if eq .GOOS "windows"}}.exe{{end}}'
      OUTPUT: '{{.BIN_DIR}}/{{.APP_NAME}}-{{.GOOS}}-{{.GOARCH}}{{.EXT}}'
    cmds:
      - CGO_ENABLED=0 GOOS={{.GOOS}} GOARCH={{.GOARCH}} go build -ldflags="{{.GO_LDFLAGS}}" -o {{.OUTPUT}} {{.CMD_PATH}}
      - echo "✓ {{.GOOS}}/{{.GOARCH}}"

  release:package:
    desc: 【发布】打包所有平台的完整发布包（包含下载器工具）
    cmds:
      - task: release:clean
      - task: release:build
      - echo "📦 开始打包各平台发布包..."
      - task: release:package:platform
        vars: { GOOS: linux, GOARCH: amd64, PLATFORM: linux, ARCH: x64 }
      - task: release:package:platform
        vars: { GOOS: linux, GOARCH: arm64, PLATFORM: linux, ARCH: arm64 }
      - task: release:package:platform
        vars: { GOOS: darwin, GOARCH: amd64, PLATFORM: darwin, ARCH: x64 }
      - task: release:package:platform
        vars: { GOOS: darwin, GOARCH: arm64, PLATFORM: darwin, ARCH: arm64 }
      - task: release:package:platform
        vars: { GOOS: windows, GOARCH: amd64, PLATFORM: win32, ARCH: x64 }
      - task: release:package:platform
        vars: { GOOS: windows, GOARCH: arm64, PLATFORM: win32, ARCH: arm64 }
      - echo "✅ 所有平台发布包打包完成"
      - echo "📦 发布包位置 {{.RELEASE_DIR}}/packages/"
      - task: release:package:list

  release:package:platform:
    internal: true
    vars:
      EXT: '{{if eq .GOOS "windows"}}.exe{{end}}'
      PKG_NAME: '{{.APP_NAME}}-{{.GOOS}}-{{.GOARCH}}'
      PKG_DIR: '{{.RELEASE_DIR}}/packages/{{.PKG_NAME}}'
      TOOLS_SRC: '{{.TOOLS_BIN_DIR}}/{{.PLATFORM}}/{{.ARCH}}'
    cmds:
      # 创建发布包目录结构
      - task: _mkdir
        vars: { DIR: "{{.PKG_DIR}}" }
      - task: _mkdir
        vars: { DIR: "{{.PKG_DIR}}/bin" }
      - task: _mkdir
        vars: { DIR: "{{.PKG_DIR}}/configs" }
      - task: _mkdir
        vars: { DIR: "{{.PKG_DIR}}/logs" }

      # 复制主程序
      - task: _cp
        vars:
          SRC: "{{.BIN_DIR}}/{{.PKG_NAME}}{{.EXT}}"
          DST: "{{.PKG_DIR}}/{{.APP_NAME}}{{.EXT}}"

      # 复制下载器工具
      - task: _cp_dir
        vars:
          SRC: "{{.TOOLS_SRC}}"
          DST: "{{.PKG_DIR}}/bin"

      # 复制配置文件
      - task: _cp
        vars:
          SRC: "configs/download_schemas.json"
          DST: "{{.PKG_DIR}}/configs/"

      # 创建启动脚本和说明文件
      - task: release:package:create_readme
        vars:
          PKG_DIR: "{{.PKG_DIR}}"
          GOOS: "{{.GOOS}}"
          EXT: "{{.EXT}}"

      # 设置可执行权限（非 Windows）
      - task: release:package:set_permissions
        vars:
          PKG_DIR: "{{.PKG_DIR}}"
          GOOS: "{{.GOOS}}"

      - echo "✓ {{.GOOS}}/{{.GOARCH}} 发布包已打包"

  release:package:create_readme:
    internal: true
    silent: true
    cmds:
      - |
        cat > "{{.PKG_DIR}}/README.txt" << 'EOF'
        MediaGo core - 发布包说明
        =====================================

        目录结构:
          mediago-core{{.EXT}}   - 主程序
          bin/                          - 下载器工具目录
            ├── N_m3u8DL-RE{{.EXT}}     - M3U8 下载器
            ├── BBDown{{.EXT}}          - Bilibili 下载器
            ├── gopeed{{.EXT}}          - 直接下载器
            └── ffmpeg{{.EXT}}          - FFmpeg (如果存在)
          configs/                      - 配置文件目录
            └── download_schemas.json   - 下载配置
          logs/                         - 日志目录

        使用方法:
          {{if eq .GOOS "windows"}}
          1. 双击运行 mediago-core.exe
          2. 或在命令行中运行: mediago-core.exe
          {{else}}
          1. 在终端中运行: ./mediago-core
          2. 或使用启动脚本: ./start.sh
          {{end}}

        环境变量配置:
          程序会自动使用 bin/ 目录下的下载器工具。
          如需自定义配置，可设置以下环境变量:
            - MEDIAGO_M3U8_BIN       M3U8 下载器路径
            - MEDIAGO_BILIBILI_BIN   Bilibili 下载器路径
            - MEDIAGO_DIRECT_BIN     直接下载器路径
            - MEDIAGO_LOG_LEVEL      日志级别 (debug/info/warn/error)
            - MEDIAGO_LOG_DIR        日志目录路径
            - MEDIAGO_SERVER_ADDR    服务器监听地址 (默认 :8080)

        更多信息请访问: https://github.com/caorushizi/mediago
        EOF
      - |
        {{if ne .GOOS "windows"}}
        cat > "{{.PKG_DIR}}/start.sh" << 'EOF'
        #!/bin/bash
        # MediaGo core 启动脚本

        # 获取脚本所在目录
        DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
        cd "$DIR"

        # 设置环境变量
        export MEDIAGO_M3U8_BIN="$DIR/bin/N_m3u8DL-RE"
        export MEDIAGO_BILIBILI_BIN="$DIR/bin/BBDown"
        export MEDIAGO_DIRECT_BIN="$DIR/bin/gopeed"
        export MEDIAGO_SCHEMA_PATH="$DIR/configs/download_schemas.json"
        export MEDIAGO_LOG_DIR="$DIR/logs"

        # 启动程序
        echo "正在启动 MediaGo core..."
        ./mediago-core
        EOF
        chmod +x "{{.PKG_DIR}}/start.sh"
        {{end}}

  release:package:set_permissions:
    internal: true
    silent: true
    cmds:
      - |
        {{if ne .GOOS "windows"}}
        chmod +x "{{.PKG_DIR}}/mediago-core"
        chmod +x "{{.PKG_DIR}}/bin/"* 2>/dev/null || true
        {{end}}

  release:package:list:
    internal: true
    silent: true
    cmds:
      - |
        echo ""
        echo "发布包列表:"
        {{if eq OS "windows"}}
        dir /B "{{.RELEASE_DIR}}\packages" 2>nul || echo "无发布包"
        {{else}}
        ls -1 "{{.RELEASE_DIR}}/packages" 2>/dev/null || echo "无发布包"
        {{end}}
        echo ""
        echo "打包完成的文件位于 {{.RELEASE_DIR}}/packages/"

  release:package:zip:
    desc: 【发布】将发布包压缩为 zip 文件
    cmds:
      - echo "🗜️  正在压缩发布包..."
      - task: release:package:zip:platform
        vars: { GOOS: linux, GOARCH: amd64 }
      - task: release:package:zip:platform
        vars: { GOOS: linux, GOARCH: arm64 }
      - task: release:package:zip:platform
        vars: { GOOS: darwin, GOARCH: amd64 }
      - task: release:package:zip:platform
        vars: { GOOS: darwin, GOARCH: arm64 }
      - task: release:package:zip:platform
        vars: { GOOS: windows, GOARCH: amd64 }
      - task: release:package:zip:platform
        vars: { GOOS: windows, GOARCH: arm64 }
      - echo "✅ 所有发布包已压缩"
      - echo "📦 压缩包位置在 {{.RELEASE_DIR}}/archives/"

  release:package:zip:platform:
    internal: true
    vars:
      PKG_NAME: '{{.APP_NAME}}-{{.GOOS}}-{{.GOARCH}}'
      PKG_DIR: '{{.RELEASE_DIR}}/packages/{{.PKG_NAME}}'
      ARCHIVE_DIR: '{{.RELEASE_DIR}}/archives'
    cmds:
      - task: _mkdir
        vars: { DIR: "{{.ARCHIVE_DIR}}" }
      - |
        cd "{{.RELEASE_DIR}}/packages" && \
        {{if eq OS "windows"}}
        powershell -Command "Compress-Archive -Path '{{.PKG_NAME}}' -DestinationPath '../archives/{{.PKG_NAME}}.zip' -Force"
        {{else}}
        zip -r "../archives/{{.PKG_NAME}}.zip" "{{.PKG_NAME}}"
        {{end}}
      - echo "✓ {{.PKG_NAME}}.zip"

  release:test:
    desc: 【发布】运行完整测试套件
    cmds:
      - go test -race -timeout 10m ./...
      - echo "✅ 完整测试通过"

  release:clean:
    desc: 【发布】清理所有发布产物
    cmds:
      - task: _rmrf
        vars: { PATH: "{{.BIN_DIR}}" }
      - task: _rmrf
        vars: { PATH: "{{.RELEASE_DIR}}" }
      - echo "✅ 发布产物清理完成"

  release:prepare:
    desc: 【发布】完整发布流程（测试 + 构建 + 打包 + 压缩）
    cmds:
      - task: release:clean
      - task: dev:tidy
      - task: release:test
      - task: release:package
      - task: release:package:zip
      - echo "✅ 完整发布流程完成"
      - echo "📦 发布包位置 {{.RELEASE_DIR}}/packages/"
      - echo "🗜️  压缩包位置 {{.RELEASE_DIR}}/archives/"

  # ============================================================
  # NPM 发布任务 (NPM Release Pipeline)
  # ============================================================

  release:npm:clean:
    desc: 【NPM】清理 NPM 发布产物
    cmds:
      - task: _rmrf
        vars: { PATH: "{{.RELEASE_DIR}}/npm" }
      - task: _clean_npm_bins
      - echo "✅ NPM 发布产物清理完成"

  release:npm:build:
    desc: 【NPM】构建所有平台的 NPM 包二进制文件
    cmds:
      - task: release:npm:build:binary
        vars: { GOOS: darwin, GOARCH: amd64, PLATFORM: darwin-x64 }
      - task: release:npm:build:binary
        vars: { GOOS: darwin, GOARCH: arm64, PLATFORM: darwin-arm64 }
      - task: release:npm:build:binary
        vars: { GOOS: linux, GOARCH: amd64, PLATFORM: linux-x64 }
      - task: release:npm:build:binary
        vars: { GOOS: linux, GOARCH: arm64, PLATFORM: linux-arm64 }
      - task: release:npm:build:binary
        vars: { GOOS: windows, GOARCH: amd64, PLATFORM: win32-x64 }
      - task: release:npm:build:binary
        vars: { GOOS: windows, GOARCH: arm64, PLATFORM: win32-arm64 }
      - echo "✅ NPM 所有平台二进制文件构建完成"

  release:npm:build:binary:
    internal: true
    vars:
      EXT: '{{if eq .GOOS "windows"}}.exe{{end}}'
      OUTPUT_DIR: '{{.RELEASE_DIR}}/npm/{{.PLATFORM}}/bin'
    cmds:
      - task: _mkdir
        vars: { DIR: "{{.OUTPUT_DIR}}" }
      - CGO_ENABLED=0 GOOS={{.GOOS}} GOARCH={{.GOARCH}} go build -ldflags="{{.GO_LDFLAGS}}" -o {{.OUTPUT_DIR}}/mediago-core{{.EXT}} {{.CMD_PATH}}
      - echo "✓ NPM {{.PLATFORM}}"

  release:npm:assemble:
    desc: 【NPM】组装 NPM 包（生成 package.json 并复制二进制文件）
    deps: [release:package]
    cmds:
      - node scripts/generate-npm-packages.js {{.VERSION}}
      - task: release:npm:copy
      - task: release:npm:permissions
      - echo "✅ NPM 包组装完成 (版本{{.VERSION}})"

  release:npm:copy:
    internal: true
    cmds:
      - task: _mkdir
        vars: { DIR: "npm/@mediago/core-darwin-x64/files" }
      - task: _cp
        vars: { SRC: "{{.RELEASE_DIR}}/packages/mediago-core-darwin-amd64/*", DST: "npm/@mediago/core-darwin-x64/files/" }
      - task: _mkdir
        vars: { DIR: "npm/@mediago/core-darwin-arm64/files" }
      - task: _cp
        vars: { SRC: "{{.RELEASE_DIR}}/packages/mediago-core-darwin-arm64/*", DST: "npm/@mediago/core-darwin-arm64/files/" }
      - task: _mkdir
        vars: { DIR: "npm/@mediago/core-linux-x64/files" }
      - task: _cp
        vars: { SRC: "{{.RELEASE_DIR}}/packages/mediago-core-linux-amd64/*", DST: "npm/@mediago/core-linux-x64/files/" }
      - task: _mkdir
        vars: { DIR: "npm/@mediago/core-linux-arm64/files" }
      - task: _cp
        vars: { SRC: "{{.RELEASE_DIR}}/packages/mediago-core-linux-arm64/*", DST: "npm/@mediago/core-linux-arm64/files/" }
      - task: _mkdir
        vars: { DIR: "npm/@mediago/core-win32-x64/files" }
      - task: _cp
        vars: { SRC: "{{.RELEASE_DIR}}/packages/mediago-core-windows-amd64/*", DST: "npm/@mediago/core-win32-x64/files/" }
      - task: _mkdir
        vars: { DIR: "npm/@mediago/core-win32-arm64/files" }
      - task: _cp
        vars: { SRC: "{{.RELEASE_DIR}}/packages/mediago-core-windows-arm64/*", DST: "npm/@mediago/core-win32-arm64/files/" }

  release:npm:permissions:
    internal: true
    cmds:
      - |
        {{if ne OS "windows"}}
          chmod -R +x npm/@mediago/core-darwin-x64/files
          chmod -R +x npm/@mediago/core-darwin-arm64/files
          chmod -R +x npm/@mediago/core-linux-x64/files
          chmod -R +x npm/@mediago/core-linux-arm64/files
        {{end}}

  release:npm:verify:
    internal: true
    preconditions:
      - sh: '[ "{{.PUBLISH}}" = "true" ]'
        msg: "⚠️  必须设置 PUBLISH=true 才能发布到 NPM"
      - sh: '[ -n "{{.VERSION}}" ]'
        msg: "⚠️  必须设置 VERSION (例如: VERSION=1.2.3)"

  release:npm:publish:
    desc: 【NPM】发布 NPM 包到 NPM Registry（需要 PUBLISH=true）
    cmds:
      - task: release:npm:verify
      - cd npm/@mediago/core-darwin-x64 && npm publish --access public
      - cd npm/@mediago/core-darwin-arm64 && npm publish --access public
      - cd npm/@mediago/core-linux-x64 && npm publish --access public
      - cd npm/@mediago/core-linux-arm64 && npm publish --access public
      - cd npm/@mediago/core-win32-x64 && npm publish --access public
      - cd npm/@mediago/core-win32-arm64 && npm publish --access public
      - cd npm/@mediago/core && npm publish --access public
      - echo "✅ NPM 包发布成功 (版本{{.VERSION}})"

  release:npm:
    desc: 【NPM】完整 NPM 发布流程（设置 VERSION=x.y.z 和可选的 PUBLISH=true）
    cmds:
      - task: release:npm:clean
      - task: release:npm:assemble
        vars: { VERSION: '{{.VERSION | default "0.0.0"}}' }
      - |
        {{if eq .PUBLISH "true"}}
          task release:npm:publish VERSION={{.VERSION}} PUBLISH={{.PUBLISH}}
        {{else}}
          echo "🔍 试运行完成。设置 PUBLISH=true 以发布到 NPM。"
          echo "📦 NPM 包已准备就绪在 npm/@mediago/"
        {{end}}

  release:npm:dry-run:
    desc: 【NPM】NPM 发布演练（不实际发布）
    cmds:
      - task: release:npm
        vars: { VERSION: '{{.VERSION | default "0.0.0"}}', PUBLISH: "false" }

  # ============================================================
  # 快捷命令 (Shortcuts)
  # ============================================================

  run:
    desc: 运行服务（dev 的别名）
    cmds:
      - task: dev

  build:
    desc: 构建当前平台（dev:build 的别名）
    cmds:
      - task: dev:build

  test:
    desc: 运行测试（dev:test 的别名）
    cmds:
      - task: dev:test

  clean:
    desc: 清理所有产物
    cmds:
      - task: dev:clean
      - task: release:clean
      - task: release:npm:clean

  # ============================================================
  # 内部辅助任务 (Internal Helpers)
  # ============================================================

  _mkdir:
    internal: true
    platforms: [linux, darwin, windows]
    cmds:
      - mkdir -p {{.DIR}}

  _rmrf:
    internal: true
    platforms: [linux, darwin, windows]
    cmds:
      - defer: { task: _ignore_error }
      - rm -rf {{.PATH}}

  _cp:
    internal: true
    platforms: [linux, darwin, windows]
    cmds:
      - cp -r {{.SRC}} {{.DST}}

  _cp_dir:
    internal: true
    platforms: [linux, darwin, windows]
    cmds:
      - cp -r {{.SRC}}/* {{.DST}}/

  _check_file:
    internal: true
    platforms: [linux, darwin, windows]
    silent: true
    cmds:
      - |
        if [ -f "{{.FILE}}" ]; then
          echo "  ✓ {{.NAME}} 存在"
        else
          echo "  ✗ {{.NAME}} 不存在"
        fi

  _clean_npm_bins:
    internal: true
    platforms: [linux, darwin, windows]
    cmds:
      - |
        for dir in npm/@mediago/*/bin; do
          if [ -d "$dir" ]; then
            rm -rf "$dir"
          fi
        done || true

  _ignore_error:
    internal: true
    cmds:
      - exit 0
