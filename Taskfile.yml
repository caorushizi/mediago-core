# MediaGo Downloader - Taskfile (简化版)
# 安装 Task: https://taskfile.dev/installation/
version: "3"

vars:
  APP_NAME: mediago-downloader
  CMD_PATH: ./cmd/server
  BIN_DIR: ./bin
  VERSION:
    sh: git describe --tags --always --dirty 2>/dev/null || echo "dev"
  GO_LDFLAGS: -s -w

env:
  CGO_ENABLED: 0
  MEDIAGO_SERVER_ADDR: ":8080"
  MEDIAGO_SCHEMA_PATH: "./configs/download_schemas.json"

tasks:
  default:
    desc: 显示所有可用任务
    cmds:
      - task --list
    silent: true

  # ==================== 开发任务 ====================

  run:
    desc: 运行服务
    cmds:
      - go run {{.CMD_PATH}}

  # ==================== 构建任务 ====================

  build:
    desc: 编译当前平台
    sources:
      - "**/*.go"
      - go.mod
    generates:
      - "{{.BIN_DIR}}/{{.APP_NAME}}*"
    cmds:
      - mkdir -p {{.BIN_DIR}}
      - go build -ldflags "{{.GO_LDFLAGS}}" -o {{.BIN_DIR}}/{{.APP_NAME}}{{exeExt}} {{.CMD_PATH}}
      - echo "✅ 编译成功"

  build:all:
    desc: 交叉编译所有平台
    cmds:
      - mkdir -p {{.BIN_DIR}}
      - GOOS=linux GOARCH=amd64 go build -ldflags "{{.GO_LDFLAGS}}" -o {{.BIN_DIR}}/{{.APP_NAME}}-linux-amd64 {{.CMD_PATH}}
      - GOOS=darwin GOARCH=amd64 go build -ldflags "{{.GO_LDFLAGS}}" -o {{.BIN_DIR}}/{{.APP_NAME}}-darwin-amd64 {{.CMD_PATH}}
      - GOOS=darwin GOARCH=arm64 go build -ldflags "{{.GO_LDFLAGS}}" -o {{.BIN_DIR}}/{{.APP_NAME}}-darwin-arm64 {{.CMD_PATH}}
      - GOOS=windows GOARCH=amd64 go build -ldflags "{{.GO_LDFLAGS}}" -o {{.BIN_DIR}}/{{.APP_NAME}}-windows-amd64.exe {{.CMD_PATH}}
      - echo "✅ 全平台编译完成"

  # ==================== 测试任务 ====================

  test:
    desc: 运行测试
    cmds:
      - go test -v ./...

  test:coverage:
    desc: 测试覆盖率报告
    cmds:
      - go test -coverprofile=coverage.out ./...
      - go tool cover -html=coverage.out -o coverage.html
      - echo "✅ 覆盖率报告已生成"

  # ==================== 代码质量 ====================

  fmt:
    desc: 格式化代码
    cmds:
      - go fmt ./...

  lint:
    desc: 代码检查
    cmds:
      - golangci-lint run ./...

  tidy:
    desc: 整理依赖
    cmds:
      - go mod tidy

  # ==================== 清理任务 ====================

  clean:
    desc: 清理构建产物
    cmds:
      - rm -rf {{.BIN_DIR}} coverage.* docs/

  # ==================== Swagger 文档 ====================

  swagger:
    desc: 生成 Swagger 文档
    sources:
      - "cmd/**/*.go"
      - "internal/**/*.go"
    generates:
      - "docs/swagger.json"
    cmds:
      - swag init -g cmd/server/main.go -o docs --parseDependency --parseInternal
      - echo "✅ Swagger 文档生成完成"

  swagger:open:
    desc: 打开 Swagger UI
    cmds:
      - echo "📖 http://localhost:8080/swagger/index.html"
      - |
        {{if eq OS "windows"}}start http://localhost:8080/swagger/index.html
        {{else if eq OS "darwin"}}open http://localhost:8080/swagger/index.html
        {{else}}xdg-open http://localhost:8080/swagger/index.html{{end}}

  # ==================== Docker 任务 ====================

  docker:
    desc: 构建并运行 Docker
    cmds:
      - docker build -t {{.APP_NAME}}:{{.VERSION}} .
      - docker run -it --rm -p 8080:8080 {{.APP_NAME}}:{{.VERSION}}

  # ==================== 发布任务 ====================

  release:
    desc: 构建发布版本
    cmds:
      - task: clean
      - task: test
      - task: build:all
      - echo "✅ 发布完成"

  # ==================== 辅助任务 ====================

  tools:
    desc: 安装开发工具
    cmds:
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - go install github.com/swaggo/swag/cmd/swag@latest
      - echo "✅ 工具安装完成"

  docs:
    desc: Generate Swagger documentation
    cmds:
      - swag init -g cmd/server/main.go -o docs

  # ========================== npm 发布任务 ====================
  release:npm:clean:
    desc: Clean npm release artifacts
    cmds:
      - rm -rf release/npm
      - find npm -type d -name bin -exec rm -rf {} + 2>/dev/null || true

  release:npm:build-binaries:
    desc: Cross-compile Go binaries for all platforms
    cmds:
      - task: release:npm:build-binary
        vars: { GOOS: darwin, GOARCH: amd64, PLATFORM: darwin-x64 }
      - task: release:npm:build-binary
        vars: { GOOS: darwin, GOARCH: arm64, PLATFORM: darwin-arm64 }
      - task: release:npm:build-binary
        vars: { GOOS: linux, GOARCH: amd64, PLATFORM: linux-x64 }
      - task: release:npm:build-binary
        vars: { GOOS: linux, GOARCH: arm64, PLATFORM: linux-arm64 }
      - task: release:npm:build-binary
        vars: { GOOS: windows, GOARCH: amd64, PLATFORM: win32-x64 }
      - task: release:npm:build-binary
        vars: { GOOS: windows, GOARCH: arm64, PLATFORM: win32-arm64 }

  release:npm:build-binary:
    internal: true
    vars:
      EXT: '{{if eq .GOOS "windows"}}.exe{{end}}'
      OUTPUT_DIR: release/npm/{{.PLATFORM}}/bin
    cmds:
      - mkdir -p {{.OUTPUT_DIR}}
      - CGO_ENABLED=0 GOOS={{.GOOS}} GOARCH={{.GOARCH}} go build -ldflags="-s -w" -o {{.OUTPUT_DIR}}/mediago-core{{.EXT}} ./cmd/server
      - echo "Built {{.PLATFORM}} binary"

  release:npm:assemble-packages:
    desc: Assemble npm packages with metadata
    deps: [release:npm:build-binaries]
    cmds:
      - node scripts/generate-npm-packages.js {{.VERSION}}
      - task: release:npm:copy-binaries
      - task: release:npm:set-permissions
      - echo "Assembled npm packages for version {{.VERSION}}"

  release:npm:copy-binaries:
    internal: true
    cmds:
      - mkdir -p npm/@mediago/core-darwin-x64/bin
      - cp release/npm/darwin-x64/bin/mediago-core npm/@mediago/core-darwin-x64/bin/
      - mkdir -p npm/@mediago/core-darwin-arm64/bin
      - cp release/npm/darwin-arm64/bin/mediago-core npm/@mediago/core-darwin-arm64/bin/
      - mkdir -p npm/@mediago/core-linux-x64/bin
      - cp release/npm/linux-x64/bin/mediago-core npm/@mediago/core-linux-x64/bin/
      - mkdir -p npm/@mediago/core-linux-arm64/bin
      - cp release/npm/linux-arm64/bin/mediago-core npm/@mediago/core-linux-arm64/bin/
      - mkdir -p npm/@mediago/core-win32-x64/bin
      - cp release/npm/win32-x64/bin/mediago-core.exe npm/@mediago/core-win32-x64/bin/
      - mkdir -p npm/@mediago/core-win32-arm64/bin
      - cp release/npm/win32-arm64/bin/mediago-core.exe npm/@mediago/core-win32-arm64/bin/

  release:npm:set-permissions:
    internal: true
    cmds:
      - chmod +x npm/@mediago/core-darwin-x64/bin/mediago-core
      - chmod +x npm/@mediago/core-darwin-arm64/bin/mediago-core
      - chmod +x npm/@mediago/core-linux-x64/bin/mediago-core
      - chmod +x npm/@mediago/core-linux-arm64/bin/mediago-core

  release:npm:publish:
    desc: Publish npm packages (requires PUBLISH=true)
    cmds:
      - task: release:npm:verify-publish
      - cd npm/@mediago/core-darwin-x64 && npm publish --access public
      - cd npm/@mediago/core-darwin-arm64 && npm publish --access public
      - cd npm/@mediago/core-linux-x64 && npm publish --access public
      - cd npm/@mediago/core-linux-arm64 && npm publish --access public
      - cd npm/@mediago/core-win32-x64 && npm publish --access public
      - cd npm/@mediago/core-win32-arm64 && npm publish --access public
      - cd npm/@mediago/core && npm publish --access public
      - echo "Published version {{.VERSION}} to npm"

  release:npm:verify-publish:
    internal: true
    preconditions:
      - sh: '[ "{{.PUBLISH}}" = "true" ]'
        msg: "Set PUBLISH=true to publish to npm"
      - sh: '[ -n "{{.VERSION}}" ]'
        msg: "VERSION must be set (e.g., VERSION=1.2.3)"

  release:npm:
    desc: Full npm release pipeline (set VERSION=x.y.z, optionally PUBLISH=true)
    cmds:
      - task: release:npm:clean
      - task: release:npm:assemble-packages
        vars: { VERSION: '{{.VERSION | default "0.0.0"}}' }
      - |
        if [ "{{.PUBLISH}}" = "true" ]; then
          task release:npm:publish VERSION={{.VERSION}} PUBLISH={{.PUBLISH}}
        else
          echo "Dry run completed. Set PUBLISH=true to publish to npm."
        fi
